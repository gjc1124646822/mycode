#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
struct node{
	int to;
	int v;
};
vector<node> edge;
vector<int> G[30010];
vector<int> o_edge[20];
int n,m;
int r[30010];
int u,v,t;
int far[20][30010];
int dis[30010];
bool vis[30010];
bool ok[30010];
int ans;

void add_edge(int from,int to,int v){
	edge.push_back((node){to,v});
	edge.push_back((node){from,v});
	int m=edge.size();
	G[from].push_back(m-2);
	G[to].push_back(m-1);
}

void o_spfa(int x){
	memset(vis,false,sizeof(vis));
	memset(far[x],0x3f,sizeof(far[x]));
	queue<int> q;
	for (int i=0;i<o_edge[x].size();++i){
		far[x][o_edge[x][i]]=0;
		q.push(o_edge[x][i]);
	}
	while (!q.empty()){
		int now=q.front();
		q.pop();
		vis[now]=false;
		for (int i=0;i<G[now].size();++i){
			node nxt=edge[G[now][i]];
			if (far[x][now]+nxt.v<far[x][nxt.to]){
				far[x][nxt.to]=far[x][now]+nxt.v;
				if (!vis[nxt.to]){
					vis[nxt.to]=true;
					q.push(nxt.to);
				}
			}
		}
	}
}

void wk(int x){
	for (int i=1;i<=n;++i){
		if (far[x][i]>far[x+1][i])
		  far[x][i]=far[x+1][i];
	}
}

void spfa(int x){
	memset(vis,false,sizeof(vis));
	memset(dis,0x3f,sizeof(dis));
	memset(ok,false,sizeof(ok));
	dis[x]=0;
	vis[x]=1;
	queue<int> q; q.push(x);
	while (!q.empty()){
		int now=q.front();
		q.pop();
		vis[now]=false;
		if (!ok[now]){
			ans++;
			ok[now]=true;
		}
		for (int i=0;i<G[now].size();++i){
			node nxt=edge[G[now][i]];
			if (dis[nxt.to]>dis[now]+nxt.v){
				dis[nxt.to]=dis[now]+nxt.v;
				if (!vis[nxt.to]&&dis[nxt.to]<far[r[x]+1][nxt.to]){
					q.push(nxt.to);
					vis[nxt.to]=true;
				}
			}
		}
	}
}

int main(){
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;++i){
		scanf("%d",&r[i]);
		o_edge[r[i]].push_back(i);
	}
	for (int i=1;i<=m;++i){
		scanf("%d%d%d",&u,&v,&t);
		add_edge(u,v,t);
	}
	for (int i=1;i<=10;++i) o_spfa(i);	
	for (int i=9;i>=1;--i) wk(i); 
	for (int i=1;i<=n;++i) spfa(i);
	cout<<ans;
	return 0;
}
